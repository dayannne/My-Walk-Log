generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id             Int       @id @default(autoincrement())
  username       String
  email          String    @unique
  address        Json?
  introduction   String    @default("")
  profileImage   String?
  hashedPassword String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  likedReviews   Int[]
  likedDiaries   Int[]
  likedPlaces    String[]

  reviews        Review[]
  diaries        Diary[]   @relation("author")
  comment        Comment[] @relation("commentAuthor")
}

model PlaceDetail {
  id             String   @id
  placeName      String
  categoryName   String   
  address        String   
  distance       String   
  roadAddress    String   
  x              String   
  y              String   
  likedBy        Int[]

  mainphotourl   String?
  findway        Json?     
  basicInfo      Json?     
  photo          Json?     

  reviews           Review[]
  diaries           Diary[]
}

model Review {
  id             Int       @id @default(autoincrement())
  reviewImages   String[]
  description    String
  keywords       Int[]
  walkDuration   Int
  entryFee       String?
  likedCount     Int       @default(0)
  likedBy        Int[]
  placeName      String?
  placeAddress   String?

  placeId        String
  authorId       Int
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  placeDetail    PlaceDetail? @relation(fields: [placeId], references: [id])
  author         User         @relation(fields: [authorId], references: [id])
}

model Diary {
  id             Int       @id @default(autoincrement())
  diaryImages    String[]
  content        String
  tags           String[]
  weather        String
  isPublic       Boolean   @default(false)
  likedBy        Int[]
  likedCount     Int       @default(0)
  placeName      String?
  placeAddress   String?

  placeId  String
  authorId       Int 
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  comments       Comment[]
  placeDetail    PlaceDetail? @relation(fields: [placeId], references: [id])
  author         User        @relation("author", fields: [authorId], references: [id])
}

model Comment {
  id         Int       @id @default(autoincrement())
  diaryId    Int
  authorId   Int
  content    String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  diary      Diary     @relation(fields: [diaryId], references: [id])
  author     User      @relation("commentAuthor", fields: [authorId], references: [id])
}

model Trail {
  ESNTL_ID           String @id
  WLK_COURS_FLAG_NM  String
  WLK_COURS_NM       String
  COURS_DC           String
  SIGNGU_NM          String
  COURS_LEVEL_NM     String
  COURS_LT_CN        String
  COURS_DETAIL_LT_CN String
  ADIT_DC            String
  COURS_TIME_CN      String
  OPTN_DC            String
  TOILET_DC          String
  CVNTL_NM           String
  LNM_ADDR           String
  COURS_SPOT_LA      String
  COURS_SPOT_LO      String
}
